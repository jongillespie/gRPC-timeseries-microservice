Jon's 'in-motion' Developer Notes
---------------------------------
Purpose: to document development, links to resources, and provide insight into Jon's process.

- Started with what I did not recognise: gRPC
    - Watched a few intro videos
    - Read the docs.
        gRPC
        - Google uses internally as well as externally for pub/sub
        - Netflix
        - Square (contributor and used to replace their APIs)
        - CoreOS
        - CockroachDB
        ‘Future’ of micro-services API, mobile-server API, and maybe web APIs
        RPC = Remote Procedure Call
        Allows a client to make a server call and it syntactically appears to be direct 
        - Define the messages and services using ‘Protocol Buffers’
            - Protocol Buffers are language agnostic, efficient for small payloads, convenient for transporting a lot of data and allows easy evolution of API with rules.
        .proto file is the protocol configuration file

- Inspected the data
    - Noticed a NaN

- Drew a mind-map of elements, languages and frameworks expected

- Asked about the final product desired via email (UI and Data Presentation)

- Created a GitHub Repo

- Set up local dev env - inc. venv.

-------
- Rough Plan:
    - Python / Pandas to clean CSV on server side. 
    - Implement Timescale
        - Insert clean data
        - Create first query: return all data.
    - Create Flask Server (dev)
    - Implement gRPC Server side
    - Implement gRPC Client within Flask Server
    - Implement Return all data over gRPC
    - Create GET Route on Flask Server - connecting to gRPC method
    - Test GET route with Postman
    - Create basic HTML page to display all data.
    ** Test each element along the way
    ** Utilise Branching Model where appropriate

    ** Some new things here, so start simple, don't over-engineer - do write clean minimal code.
       Revisit containerisation following POC

    Beyond POC 
    >> Implement additional data queries / manipulation
    >> Enhance UI
    >> Docker Image?

-------
- Used Pandas to clean the data, removed all NaN, convert data types to float and timestamp from str.

- Install TimeScale on MacOS, https://docs.timescale.com/latest/getting-started
    # Add our tap
    brew tap timescale/tap

    # To install
    brew install timescaledb

    # Post-install to move files to appropriate place
    /usr/local/bin/timescaledb_move.sh

    timescaledb-tune
    timescaledb_move.sh

    # Restart PostgreSQL instance
    brew services restart postgresql

    # Add a superuser postgres:
    createuser postgres -s

    # Connect to PostgreSQL, using a superuser named 'postgres'
    psql -U postgres -h localhost

    -- Create the database
    CREATE database meterusage;

    -- Connect to the database
    \c meterusage

    -- Extend the database with TimescaleDB
    CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;

    *** Connect to the new database ***
    psql -U postgres -h localhost -d meterusage

>> grpc_server.py & clean_csv_data.py
- Python TimeScale QuickStart Offical Tutorial https://docs.timescale.com/latest/tutorials/quickstart-python
- Install psycopg2 : Psycopg is the most popular PostgreSQL database adapter for the Python programming language. https://pypi.org/project/psycopg2/
    pip install psycopg2-binary

    - Create a HyperTable (from Scratch) https://docs.timescale.com/latest/getting-started/creating-hypertables
    - To create a hypertable, you start with a regular SQL table, and then convert it into a hypertable via the function create_hypertable.
    - Implemented in Code...

- Inserterd the cleaned dataframe into the db table with pandas.to_sql: https://pythontic.com/pandas/serialization/postgresql
    - Using SQLAlchemy: https://docs.sqlalchemy.org/en/13/core/engines.html#postgresql
- Confirmed correct datatypes are saved and data is in created table
- Created a get all query
- Enhanced the execution tool to faciliatate single or multiple queries

>> focus: grpc
- An introduction to gRPC and protocol buffers. https://grpc.io/docs/what-is-grpc/introduction/
- A client application can directly call a method on a server application on a different machine as if it were a local object
- gRPC uses Protocol Buffers, Google’s mature open source mechanism for serializing structured data (although it can be used with other data formats such as JSON).
- the idea of defining a service, specifying the methods that can be called remotely with their parameters and return types.
* - 4 Service types
      - Unary RPCs                  eg: rpc SayHello(HelloRequest) returns (HelloResponse);
      - Server Streaming                rpc LotsOfReplies(HelloRequest) returns (stream HelloResponse);
      - Client Streaming                rpc LotsOfGreetings(stream HelloRequest) returns (HelloResponse);
      - Bi-directional Streaming        rpc BidiHello(stream HelloRequest) returns (stream HelloResponse);
- gRPC programming API in most languages comes in both synchronous and asynchronous flavors.
- With gRPC we can define our service once in a .proto file and generate clients and servers

- Install gRPC 

    pip install grpcio
    pip install grpcio-tools

    To generate the files from the proto::: tested and works - correct paths.
      > python -m grpc_tools.protoc --proto_path=. --python_out=. --grpc_python_out=. meterusage.proto

- Protocol Buffers Language Guide (proto3): https://developers.google.com/protocol-buffers/docs/proto3
- Simple request response gRPC implemented utilising one of their examples: https://github.com/grpc/grpc/tree/master/examples/python/data_transmission













TIMESCALE INSTALL CLI Records for reference >> use later for Docker build?:
==> timescaledb
RECOMMENDED: Run 'timescaledb-tune' to update your config settings for TimescaleDB.

  timescaledb-tune --quiet --yes

IF NOT, you'll need to make sure to update /usr/local/var/postgres/postgresql.conf
to include the extension:

  shared_preload_libraries = 'timescaledb'

To finish the installation, you will need to run:

  timescaledb_move.sh

If PostgreSQL is installed via Homebrew, restart it:

  brew services restart postgresql

Moving files into place...
Success.
 jongillespie@jg-mbp  ~  timescaledb-tune                                                                                                                                                   ✔  841  16:03:18
Using postgresql.conf at this path:
/usr/local/var/postgres/postgresql.conf

Is this correct? [(y)es/(n)o]: y
Writing backup to:
/var/folders/21/ntgjmpl10jd6rzpzy_2z3m580000gn/T/timescaledb_tune.backup202008071604

shared_preload_libraries needs to be updated
Current:
#shared_preload_libraries = ''
Recommended:
shared_preload_libraries = 'timescaledb'
Is this okay? [(y)es/(n)o]: y
success: shared_preload_libraries will be updated

Tune memory/parallelism/WAL and other settings? [(y)es/(n)o]: n
Saving changes to: /usr/local/var/postgres/postgresql.conf