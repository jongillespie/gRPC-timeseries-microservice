# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import meterusage_pb2 as meterusage__pb2


class MeterUsageStub(object):
    """Interface exported by the server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAllRecords = channel.unary_stream(
                '/meterusage.MeterUsage/GetAllRecords',
                request_serializer=meterusage__pb2.AllRecordsRequest.SerializeToString,
                response_deserializer=meterusage__pb2.AllRecordsResponse.FromString,
                )


class MeterUsageServicer(object):
    """Interface exported by the server.
    """

    def GetAllRecords(self, request, context):
        """Simple RPC - a request gets a response.

        Returns all the data within the meterusage timeseries db.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MeterUsageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAllRecords': grpc.unary_stream_rpc_method_handler(
                    servicer.GetAllRecords,
                    request_deserializer=meterusage__pb2.AllRecordsRequest.FromString,
                    response_serializer=meterusage__pb2.AllRecordsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'meterusage.MeterUsage', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MeterUsage(object):
    """Interface exported by the server.
    """

    @staticmethod
    def GetAllRecords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/meterusage.MeterUsage/GetAllRecords',
            meterusage__pb2.AllRecordsRequest.SerializeToString,
            meterusage__pb2.AllRecordsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
